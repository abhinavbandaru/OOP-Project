/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//yeh kausna waala hain 2

package main;

import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.Timer;



/**
 *
 * @author hp
 */
public class Map extends javax.swing.JFrame implements ActionListener{
    Connection databaseConnection = null;
    PreparedStatement pst = null;
    ResultSet resultSet = null;
    Client client;
    
    Map(Client client) {
        this.client = client;
        initComponents();
        myinitComponents();
        timer = new Timer(10, this);
        sideMenuPanel.setBounds(0, 0, 0, 768);
        chooseRide.setBounds(250, 470, 0, 160);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sideMenuPanel = new javax.swing.JPanel();
        sideMenuCloseLabel = new javax.swing.JLabel();
        addMoneyPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        displayWalletPanel = new javax.swing.JPanel();
        displayWalletLabel = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        findCab = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        chooseRide = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        XL = new javax.swing.JPanel();
        XLCall = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        XLPriceLabel = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        go = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        GoCall = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        goPriceLabel = new javax.swing.JLabel();
        premier = new javax.swing.JPanel();
        PremierCall = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        premierPriceLabel = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        v13 = new javax.swing.JLabel();
        carIconLabel = new javax.swing.JLabel();
        v1 = new javax.swing.JLabel();
        v9 = new javax.swing.JLabel();
        v22 = new javax.swing.JLabel();
        v16 = new javax.swing.JLabel();
        v15 = new javax.swing.JLabel();
        v17 = new javax.swing.JLabel();
        v18 = new javax.swing.JLabel();
        PickDropBottomInputPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tripDestinationTextField = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        GetLocation = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        tripSourceTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        v10 = new javax.swing.JLabel();
        v24 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        sideMenuOpenLabel = new javax.swing.JLabel();
        v21 = new javax.swing.JLabel();
        v20 = new javax.swing.JLabel();
        v2 = new javax.swing.JLabel();
        v14 = new javax.swing.JLabel();
        v5 = new javax.swing.JLabel();
        v11 = new javax.swing.JLabel();
        v3 = new javax.swing.JLabel();
        v26 = new javax.swing.JLabel();
        v7 = new javax.swing.JLabel();
        v23 = new javax.swing.JLabel();
        v25 = new javax.swing.JLabel();
        v8 = new javax.swing.JLabel();
        v19 = new javax.swing.JLabel();
        v4 = new javax.swing.JLabel();
        v6 = new javax.swing.JLabel();
        v12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        Close = new javax.swing.JLabel();
        minimize = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(null);

        sideMenuPanel.setBackground(new java.awt.Color(25, 25, 25));
        sideMenuPanel.setLayout(null);

        sideMenuCloseLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/left_100px.png"))); // NOI18N
        sideMenuCloseLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sideMenuCloseLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sideMenuCloseLabelMouseClicked(evt);
            }
        });
        sideMenuPanel.add(sideMenuCloseLabel);
        sideMenuCloseLabel.setBounds(320, 10, 90, 60);

        addMoneyPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addMoneyPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMoneyPanelMouseClicked(evt);
            }
        });
        addMoneyPanel.setLayout(null);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setText("Add Money To Your Wallet");
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addMoneyPanel.add(jLabel5);
        jLabel5.setBounds(20, 20, 280, 50);

        sideMenuPanel.add(addMoneyPanel);
        addMoneyPanel.setBounds(0, 180, 420, 90);

        displayWalletPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        displayWalletPanel.setLayout(null);

        displayWalletLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        displayWalletLabel.setText("Display Wallet");
        displayWalletLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        displayWalletPanel.add(displayWalletLabel);
        displayWalletLabel.setBounds(20, 10, 390, 80);

        sideMenuPanel.add(displayWalletPanel);
        displayWalletPanel.setBounds(0, 80, 420, 100);

        name.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        name.setForeground(new java.awt.Color(240, 240, 240));
        name.setText("Welcome");
        sideMenuPanel.add(name);
        name.setBounds(20, 20, 270, 40);

        findCab.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        findCab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findCabMouseClicked(evt);
            }
        });
        findCab.setLayout(null);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setText("Find Cab");
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        findCab.add(jLabel6);
        jLabel6.setBounds(20, 20, 280, 50);

        sideMenuPanel.add(findCab);
        findCab.setBounds(0, 270, 420, 90);

        getContentPane().add(sideMenuPanel);
        sideMenuPanel.setBounds(-1000, 0, 420, 800);

        chooseRide.setLayout(null);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Choose a trip");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chooseRide.add(jLabel4);
        jLabel4.setBounds(0, 10, 880, 17);

        XL.setBackground(new java.awt.Color(25, 25, 25));
        XL.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        XL.setLayout(null);

        XLCall.setBackground(new java.awt.Color(10, 10, 10));
        XLCall.setForeground(new java.awt.Color(240, 240, 240));
        XLCall.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        XLCall.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                XLCallMouseClicked(evt);
            }
        });
        XLCall.setLayout(null);

        jLabel14.setForeground(new java.awt.Color(240, 240, 240));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/user_16px.png"))); // NOI18N
        jLabel14.setText("7");
        jLabel14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        XLCall.add(jLabel14);
        jLabel14.setBounds(70, 0, 50, 60);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(240, 240, 240));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("XL");
        jLabel15.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        XLCall.add(jLabel15);
        jLabel15.setBounds(0, 0, 90, 60);

        XLPriceLabel.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        XLPriceLabel.setForeground(new java.awt.Color(240, 240, 240));
        XLPriceLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/rupee_32px.png"))); // NOI18N
        XLPriceLabel.setText("jLabel16");
        XLPriceLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        XLCall.add(XLPriceLabel);
        XLPriceLabel.setBounds(550, 0, 110, 60);

        XL.add(XLCall);
        XLCall.setBounds(140, 20, 700, 60);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(240, 240, 240));
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/car_80px.png"))); // NOI18N
        jLabel13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        XL.add(jLabel13);
        jLabel13.setBounds(40, 20, 90, 64);

        chooseRide.add(XL);
        XL.setBounds(0, 230, 880, 100);

        go.setBackground(new java.awt.Color(25, 25, 25));
        go.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        go.setLayout(null);

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(240, 240, 240));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/car_52px.png"))); // NOI18N
        jLabel21.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        go.add(jLabel21);
        jLabel21.setBounds(40, 20, 60, 64);

        GoCall.setBackground(new java.awt.Color(10, 10, 10));
        GoCall.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        GoCall.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GoCallMouseClicked(evt);
            }
        });
        GoCall.setLayout(null);

        jLabel8.setForeground(new java.awt.Color(240, 240, 240));
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/user_16px.png"))); // NOI18N
        jLabel8.setText("4");
        GoCall.add(jLabel8);
        jLabel8.setBounds(70, 0, 50, 60);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(240, 240, 240));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Go");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        GoCall.add(jLabel7);
        jLabel7.setBounds(0, 0, 90, 60);

        goPriceLabel.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        goPriceLabel.setForeground(new java.awt.Color(240, 240, 240));
        goPriceLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/rupee_32px.png"))); // NOI18N
        goPriceLabel.setText("jLabel9");
        GoCall.add(goPriceLabel);
        goPriceLabel.setBounds(550, 0, 110, 60);

        go.add(GoCall);
        GoCall.setBounds(140, 20, 700, 60);

        chooseRide.add(go);
        go.setBounds(0, 30, 880, 100);

        premier.setBackground(new java.awt.Color(25, 25, 25));
        premier.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        premier.setLayout(null);

        PremierCall.setBackground(new java.awt.Color(10, 10, 10));
        PremierCall.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PremierCallMouseClicked(evt);
            }
        });
        PremierCall.setLayout(null);

        jLabel10.setForeground(new java.awt.Color(240, 240, 240));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/user_16px.png"))); // NOI18N
        jLabel10.setText("4");
        PremierCall.add(jLabel10);
        jLabel10.setBounds(70, 0, 50, 60);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(240, 240, 240));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Premier");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });
        PremierCall.add(jLabel11);
        jLabel11.setBounds(0, 0, 70, 60);

        premierPriceLabel.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        premierPriceLabel.setForeground(new java.awt.Color(240, 240, 240));
        premierPriceLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/rupee_32px.png"))); // NOI18N
        premierPriceLabel.setText("jLabel12");
        PremierCall.add(premierPriceLabel);
        premierPriceLabel.setBounds(550, 0, 110, 60);

        premier.add(PremierCall);
        PremierCall.setBounds(140, 20, 700, 60);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(240, 240, 240));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/car_64px.png"))); // NOI18N
        jLabel17.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        premier.add(jLabel17);
        jLabel17.setBounds(30, 20, 90, 64);

        chooseRide.add(premier);
        premier.setBounds(0, 130, 880, 100);

        getContentPane().add(chooseRide);
        chooseRide.setBounds(250, 1000, 880, 330);

        v13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v13.setForeground(new java.awt.Color(255, 0, 0));
        v13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v13.setText("13");
        v13.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v13);
        v13.setBounds(680, 180, 48, 48);

        carIconLabel.setText("jLabel3");
        getContentPane().add(carIconLabel);
        carIconLabel.setBounds(1160, 310, 80, 70);

        v1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v1.setForeground(new java.awt.Color(255, 0, 0));
        v1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v1.setText("1");
        v1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v1);
        v1.setBounds(410, 360, 48, 48);

        v9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v9.setForeground(new java.awt.Color(255, 0, 0));
        v9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v9.setText("9");
        v9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v9);
        v9.setBounds(540, 570, 48, 48);

        v22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v22.setForeground(new java.awt.Color(255, 0, 0));
        v22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v22.setText("22");
        v22.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v22.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v22);
        v22.setBounds(770, 360, 48, 48);

        v16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v16.setForeground(new java.awt.Color(255, 0, 0));
        v16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v16.setText("16");
        v16.setToolTipText("");
        v16.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v16.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v16);
        v16.setBounds(680, 110, 48, 48);

        v15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v15.setForeground(new java.awt.Color(255, 0, 0));
        v15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v15.setText("15");
        v15.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v15);
        v15.setBounds(410, 190, 48, 48);

        v17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v17.setForeground(new java.awt.Color(255, 0, 0));
        v17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v17.setText("17");
        v17.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v17.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v17);
        v17.setBounds(770, 190, 48, 48);

        v18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v18.setForeground(new java.awt.Color(255, 0, 0));
        v18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v18.setText("18");
        v18.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v18.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v18);
        v18.setBounds(1050, 180, 48, 48);

        PickDropBottomInputPanel.setBackground(new java.awt.Color(25, 25, 25));
        PickDropBottomInputPanel.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(180, 180, 180));
        jLabel2.setText("Pickup location");
        PickDropBottomInputPanel.add(jLabel2);
        jLabel2.setBounds(30, 20, 130, 19);

        tripDestinationTextField.setBackground(new java.awt.Color(10, 10, 10));
        tripDestinationTextField.setForeground(new java.awt.Color(180, 180, 180));
        tripDestinationTextField.setBorder(null);
        tripDestinationTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tripDestinationTextFieldKeyPressed(evt);
            }
        });
        PickDropBottomInputPanel.add(tripDestinationTextField);
        tripDestinationTextField.setBounds(330, 70, 180, 30);

        search.setBackground(new java.awt.Color(25, 25, 25));
        search.setForeground(new java.awt.Color(180, 180, 180));
        search.setText("Search...");
        search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });
        PickDropBottomInputPanel.add(search);
        search.setBounds(440, 130, 100, 25);

        GetLocation.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        GetLocation.setForeground(new java.awt.Color(51, 51, 255));
        GetLocation.setText("OR Get Location");
        GetLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        GetLocation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GetLocationMouseClicked(evt);
            }
        });
        PickDropBottomInputPanel.add(GetLocation);
        GetLocation.setBounds(30, 100, 210, 60);

        jLabel18.setForeground(new java.awt.Color(240, 240, 240));
        jLabel18.setText("Enter a location from 1 to 26 only");
        PickDropBottomInputPanel.add(jLabel18);
        jLabel18.setBounds(30, 50, 200, 15);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(180, 180, 180));
        jLabel19.setText("Where to ?");
        PickDropBottomInputPanel.add(jLabel19);
        jLabel19.setBounds(330, 20, 130, 19);

        tripSourceTextField.setBackground(new java.awt.Color(10, 10, 10));
        tripSourceTextField.setForeground(new java.awt.Color(180, 180, 180));
        tripSourceTextField.setBorder(null);
        tripSourceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tripSourceTextFieldActionPerformed(evt);
            }
        });
        tripSourceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tripSourceTextFieldKeyPressed(evt);
            }
        });
        PickDropBottomInputPanel.add(tripSourceTextField);
        tripSourceTextField.setBounds(30, 70, 180, 30);

        jLabel20.setForeground(new java.awt.Color(240, 240, 240));
        jLabel20.setText("Enter a location from 1 to 26 only");
        PickDropBottomInputPanel.add(jLabel20);
        jLabel20.setBounds(330, 50, 200, 15);

        getContentPane().add(PickDropBottomInputPanel);
        PickDropBottomInputPanel.setBounds(450, 600, 550, 160);

        v10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v10.setForeground(new java.awt.Color(255, 0, 0));
        v10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v10.setText("10");
        v10.setToolTipText("");
        v10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v10);
        v10.setBounds(540, 360, 48, 48);

        v24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v24.setForeground(new java.awt.Color(255, 0, 0));
        v24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v24.setText("24");
        v24.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v24.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v24);
        v24.setBounds(780, 490, 48, 48);

        jPanel2.setBackground(new java.awt.Color(25, 25, 25));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.setLayout(null);

        sideMenuOpenLabel.setBackground(new java.awt.Color(25, 25, 25));
        sideMenuOpenLabel.setForeground(new java.awt.Color(240, 240, 240));
        sideMenuOpenLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/right_100px.png"))); // NOI18N
        sideMenuOpenLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sideMenuOpenLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sideMenuOpenLabelMouseClicked(evt);
            }
        });
        jPanel2.add(sideMenuOpenLabel);
        sideMenuOpenLabel.setBounds(0, 0, 90, 80);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 0, 100, 80);

        v21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v21.setForeground(new java.awt.Color(255, 0, 0));
        v21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v21.setText("21");
        v21.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v21.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v21);
        v21.setBounds(930, 360, 48, 48);

        v20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v20.setForeground(new java.awt.Color(255, 0, 0));
        v20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v20.setText("20");
        v20.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v20.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v20);
        v20.setBounds(920, 270, 48, 48);

        v2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v2.setForeground(new java.awt.Color(255, 0, 0));
        v2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v2.setText("2");
        v2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v2);
        v2.setBounds(280, 360, 48, 48);

        v14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v14.setForeground(new java.awt.Color(255, 0, 0));
        v14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v14.setText("14");
        v14.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v14);
        v14.setBounds(540, 190, 48, 48);

        v5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v5.setForeground(new java.awt.Color(255, 0, 0));
        v5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v5.setText("5");
        v5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v5);
        v5.setBounds(330, 420, 48, 48);

        v11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v11.setForeground(new java.awt.Color(255, 0, 0));
        v11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v11.setText("11");
        v11.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v11);
        v11.setBounds(550, 270, 48, 48);

        v3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v3.setForeground(new java.awt.Color(255, 0, 0));
        v3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v3.setText("3");
        v3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v3);
        v3.setBounds(280, 280, 48, 48);

        v26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v26.setForeground(new java.awt.Color(255, 0, 0));
        v26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v26.setText("26");
        v26.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v26.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v26);
        v26.setBounds(860, 360, 48, 48);

        v7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v7.setForeground(new java.awt.Color(255, 0, 0));
        v7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v7.setText("7");
        v7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v7);
        v7.setBounds(400, 500, 48, 48);

        v23.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v23.setForeground(new java.awt.Color(255, 0, 0));
        v23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v23.setText("23");
        v23.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v23.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v23);
        v23.setBounds(850, 490, 48, 48);

        v25.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v25.setForeground(new java.awt.Color(255, 0, 0));
        v25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v25.setText("25");
        v25.setToolTipText("");
        v25.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v25.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v25);
        v25.setBounds(320, 370, 48, 48);

        v8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v8.setForeground(new java.awt.Color(255, 0, 0));
        v8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v8.setText("8");
        v8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v8);
        v8.setBounds(540, 500, 48, 48);

        v19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v19.setForeground(new java.awt.Color(255, 0, 0));
        v19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v19.setText("19");
        v19.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v19.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v19);
        v19.setBounds(770, 270, 48, 48);

        v4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v4.setForeground(new java.awt.Color(255, 0, 0));
        v4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v4.setText("4");
        v4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v4);
        v4.setBounds(390, 270, 48, 48);

        v6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v6.setForeground(new java.awt.Color(255, 0, 0));
        v6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v6.setText("6");
        v6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v6);
        v6.setBounds(400, 420, 48, 48);

        v12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        v12.setForeground(new java.awt.Color(255, 0, 0));
        v12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v12.setText("12");
        v12.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        v12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(v12);
        v12.setBounds(670, 270, 48, 48);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/TestBig.JPG"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(250, 80, 880, 520);

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.setLayout(null);

        Close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/close_window_48px.png"))); // NOI18N
        Close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CloseMouseClicked(evt);
            }
        });
        jPanel4.add(Close);
        Close.setBounds(1310, 10, 50, 48);

        minimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/ICON/minimize_window_48px.png"))); // NOI18N
        minimize.setText("jLabel3");
        minimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeMouseClicked(evt);
            }
        });
        jPanel4.add(minimize);
        minimize.setBounds(1260, 10, 50, 50);

        getContentPane().add(jPanel4);
        jPanel4.setBounds(0, 0, 1380, 800);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void myinitComponents()
    {	
        distanceMatrixInit();
        orientationMatrixInit();
        try {
            databaseConnection = DatabaseDetails.establishConnection();
            userLocationBufferedImage = ImageIO.read(getClass().getResource("user_location_64px.png"));
            userLocationIcon = userLocationBufferedImage.getScaledInstance(48, 48, Image.SCALE_SMOOTH);
            
            carIconBufferedImage = ImageIO.read(getClass().getResource("carnew - right.png"));
            carOrientations[0] = carIconBufferedImage.getScaledInstance(48, 48, Image.SCALE_SMOOTH);
            carIconBufferedImage = ImageIO.read(getClass().getResource("carnew - up.png"));
            carOrientations[1] = carIconBufferedImage.getScaledInstance(48, 48, Image.SCALE_SMOOTH);
            carIconBufferedImage = ImageIO.read(getClass().getResource("carnew - left.png"));
            carOrientations[2] = carIconBufferedImage.getScaledInstance(48, 48, Image.SCALE_SMOOTH);
            carIconBufferedImage = ImageIO.read(getClass().getResource("carnew - down.png"));
            carOrientations[3] = carIconBufferedImage.getScaledInstance(48, 48, Image.SCALE_SMOOTH);
            
            carIcon = carOrientations[0];
            carIconLabel.setIcon(new ImageIcon(carIcon));
        } 
        catch (Exception ex) {
            Logger.getLogger(Map.class.getName()).log(Level.SEVERE, null, ex);
        }
        isLocationFound = false;
	locationLabels[1] = v1;
	locationLabels[2] = v2;
	locationLabels[3] = v3;  
	locationLabels[4] = v4;
	locationLabels[5] = v5;
	locationLabels[6] = v6;
	locationLabels[7] = v7;
	locationLabels[8] = v8;
	locationLabels[9] = v9;
	locationLabels[10] = v10;
	locationLabels[11] = v11;
	locationLabels[12] = v12;
	locationLabels[13] = v13;
	locationLabels[14] = v14;
	locationLabels[15] = v15;
	locationLabels[16] = v16;
	locationLabels[17] = v17;
	locationLabels[18] = v18;
	locationLabels[19] = v19;
	locationLabels[20] = v20;
	locationLabels[21] = v21;
	locationLabels[22] = v22;
	locationLabels[23] = v23;
	locationLabels[24] = v24;
	locationLabels[25] = v25;
	locationLabels[26] = v26;
        try {
            
        } catch (Exception e) {}
    }
    
    private void sideMenuCloseLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sideMenuCloseLabelMouseClicked
        sideMenuOpenLabel.setEnabled(true);
        Thread th = new Thread(){
            public void run(){
                try{
                    for (int i = 420; i > 0; i -= 2) {
                        sideMenuPanel.setBounds(0, 0, i, 768);
                        Thread.sleep(1);
                    }
                    sideMenuPanel.setBounds(0, 0, 0, 768);
                }
                catch (Exception e){
                    System.out.println(e);
                }
            }
        };
        th.start();
    }//GEN-LAST:event_sideMenuCloseLabelMouseClicked
    
    private void addMoneyPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMoneyPanelMouseClicked
        JOptionPane.showMessageDialog(null, "Current Wallet Balance is: " + client.wallet);
        String moneyToAdd = JOptionPane.showInputDialog(null, "Enter the amount you wish to add to your wallet");
        int add;
        add = Integer.parseInt(moneyToAdd);
        client.wallet += add;
        try{
            String query = "UPDATE `logindatabase` SET `wallet` = ? WHERE `logindatabase`.`Username` = ?;";
            pst = databaseConnection.prepareStatement(query);
            pst.setInt(1, client.wallet);
            pst.setString(2, client.username);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Updated Wallet Balance is: " + client.wallet);
            displayWalletLabel.setText("Wallet Balance: " + client.wallet);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_addMoneyPanelMouseClicked
    
    void findRide(){
        tripSource = Integer.parseInt(tripSourceTextField.getText());
        tripDestination = Integer.parseInt(tripDestinationTextField.getText());
        if(!isLocationFound){
            tripSource = Integer.parseInt(tripSourceTextField.getText());
            while((tripSource < 0) || (tripSource > 26)){
                JOptionPane.showMessageDialog(null, "Enter a valid pickup location or use 'Get Location'");
                tripSourceTextField.setText("");
                String pickupInput = JOptionPane.showInputDialog(null, "Enter a valid pickup ");
                tripSource = Integer.parseInt(pickupInput);
            }
            isLocationFound = true;
            tripSourceTextField.setText(Integer.toString(tripSource));
        }
        while(tripDestination <= 0 || tripDestination >= 27 || tripDestination == tripSource){
            JOptionPane.showMessageDialog(null, "Enter a valid destination");
            String dropInput = JOptionPane.showInputDialog(null, "Enter a valid destination");
            tripDestination = Integer.parseInt(dropInput);
            tripDestinationTextField.setText(dropInput);
            if (tripDestination > 0 && tripDestination < 27 && tripDestination != tripSource) {
                break;
            }
        }
        //showInitialClientLocation(tripSource);
        renderCabClientIcons(tripSource, tripSource, 1);
        while(client.wallet < 300){
            
            JOptionPane.showMessageDialog(null,"Current Wallet Balance: " + client.wallet);
            String moneyToAddInput = JOptionPane.showInputDialog(null,"You need to have atleast Rs 300 in your wallet.");
            int add = Integer.parseInt(moneyToAddInput);
            client.wallet += add; 
            
            try{
                String query = "UPDATE logindatabase SET wallet = ? WHERE logindatabase.Username = ?;";
                pst = databaseConnection.prepareStatement(query);
                pst.setInt(1, client.wallet);
                pst.setString(2, client.username);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null,"Updated Wallet Balance: " + client.wallet);
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
        JOptionPane.showMessageDialog(null, "Pickup is: " + tripSource);
        JOptionPane.showMessageDialog(null, "Destination is: " + tripDestination);
        distanceMatrixInit();
        renderCabClientIcons(tripSource, tripSource, 1);
        Thread th = new Thread(){
            public void run(){
                try{
                    for (int q = 0; q <= 200; q += 1) {
                        Thread.sleep(5);
                        PickDropBottomInputPanel.setBounds(450, 600 + q, 550, 160);
                    }
                }
                catch (Exception e){
                    System.out.println(e);
                }
            }
        };
        th.start();
        JOptionPane.showMessageDialog(null,"You have Rs: " + client.wallet + "in your wallet");
        Thread th2 = new Thread(){
            public void run(){
                try{
                    for (int q = 0; q <= 330; q += 1) {
                        Thread.sleep(1);
                        chooseRide.setBounds(250, 768 - q, 880, 330);
                    }
                }
                catch (Exception e){
                    System.out.println(e);
                }
            }
        };
        th2.start();
        distanceMatrixInit();
        minimumDistanceOfTrip = distanceMatrix[tripSource][tripDestination];
        goPriceLabel.setText("" + (int)minimumDistanceOfTrip * 14);
        premierPriceLabel.setText("" + (int)minimumDistanceOfTrip * 16);
        XLPriceLabel.setText("" + (int)minimumDistanceOfTrip * 20);
        }
    
    private void tripDestinationTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tripDestinationTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {  
            findRide();
        }    
    }//GEN-LAST:event_tripDestinationTextFieldKeyPressed

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
            findRide();
    }//GEN-LAST:event_searchMouseClicked

    private void GetLocationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GetLocationMouseClicked
        if (!isLocationFound) {
            JOptionPane.showMessageDialog(null, "Finding Location");
            tripSource = ((int)(Math.random() * 26) + 1);
            tripSourceTextField.setText(String.valueOf(tripSource));
            JOptionPane.showMessageDialog(null,"You are at: " + tripSource);
            isLocationFound = true;
            //showInitialClientLocation(tripSource);
            renderCabClientIcons(tripSource, tripSource, 1);
        }
        else{
            JOptionPane.showMessageDialog(null, "Finding your location...");
            JOptionPane.showMessageDialog(null, "You are at: " + tripSource);
        }
    }//GEN-LAST:event_GetLocationMouseClicked

    private void tripSourceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tripSourceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tripSourceTextFieldActionPerformed

    private void tripSourceTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tripSourceTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tripSourceTextFieldKeyPressed

    private void sideMenuOpenLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sideMenuOpenLabelMouseClicked
        name.setText("Welcome " + client.firstName);
        displayWalletLabel.setText("Wallet Balance: " + client.wallet);
        if(!sideMenuOpenLabel.isEnabled()) return;
        Thread th = new Thread(){
            public void run(){
                sideMenuOpenLabel.setEnabled(false);
                try{
                    for (int i = 0; i <= 420; i += 2) {
                        Thread.sleep(1);
                        sideMenuPanel.setBounds(0, 0, i, 768);
                    }
                }
                catch (Exception e){
                    System.out.println(e);
                }
            }
        };
        th.start();  
    }//GEN-LAST:event_sideMenuOpenLabelMouseClicked

    private void cabCall(String cabType)
    {
        tripSource = Integer.parseInt(tripSourceTextField.getText());
        tripDestination = Integer.parseInt(tripDestinationTextField.getText());
        try{
            String query;
            PreparedStatement pst;
            ResultSet rs;
            boolean isDriverFound = false;
            int triesToFindCab = 0;
            do
            {
                query = "Select * from cab where InService = ? and cabType= ? ;";
                pst = databaseConnection.prepareStatement(query);
                pst.setInt(1,0);
                pst.setString(2, cabType);
                rs = pst.executeQuery();
                if(rs.next()) 
                {
                    isDriverFound = true;
                    break;
                }
                triesToFindCab++;
                Thread.currentThread().sleep(500);
            }
            while(triesToFindCab <= 10);
            
            if(!isDriverFound) 
            {
                JOptionPane.showMessageDialog(this, "No cabs could be found for your specified trip. Please try again.");
                return;
            }
            rs = pst.executeQuery();
            double closestCabDistance = 10000000d, ratingOfClosestCab = 0;
            String driverNameOfClosestDriver = null; 
            while (rs.next())
            {
                if(closestCabDistance > distanceMatrix[tripSource][rs.getInt("location")]) 
                {
                    closestCabDistance = distanceMatrix[tripSource][rs.getInt("location")];
                    ratingOfClosestCab = rs.getDouble("Rating");
                    driverNameOfClosestDriver = rs.getString("driverName");
                }
                else if(closestCabDistance == distanceMatrix[tripSource][rs.getInt("location")])
                {
                    if(ratingOfClosestCab < rs.getDouble("Rating"))
                    {
                        ratingOfClosestCab = rs.getDouble("Rating");
                        driverNameOfClosestDriver = rs.getString("driverName");
                    }
                }
            }
            query = "Select * from cab where InService = 0 and driverName= ?;";
            pst = databaseConnection.prepareStatement(query);
            pst.setString(1, driverNameOfClosestDriver);
            rs = pst.executeQuery();
            rs.next();
            Cab cab = new Cab();
            cab.rating = rs.getDouble("Rating");
            cab.carModel = rs.getString("carModel");
            cab.driverName = rs.getString("driverName");
            cab.plateNumber = rs.getString("plateNumber");
            cab.destination = tripDestination;
            cab.location = rs.getInt("location");
            cab.cost = (int)(minimumDistanceOfTrip * 20);
            JOptionPane.showMessageDialog(null, "Your driver is: " + cab.driverName + "\nCar Name is: " + cab.carModel + "\nCar Number is: " + cab.plateNumber + "\nRating is: " + cab.rating);
            query = "UPDATE cab SET InService = ? WHERE cab.driverName =  ? ;";
            pst = databaseConnection.prepareStatement(query);
            pst.setInt(1, 1);
            pst.setString(2, cab.driverName);
            pst.executeUpdate();
            trip(cab);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    
    }
    
    
    private void XLCallMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_XLCallMouseClicked
        Thread th4 = new Thread(){
            public void run(){
                try{
                    for (int q = 0; q <= 330; q += 1) {
                        Thread.sleep(1);
                        chooseRide.setBounds(250, 470 + q, 880, 330);
                    }
                }
                catch (Exception e){
                    System.out.println(e);
                }
            }
        };
        th4.start();
        cabCall("x");
    }//GEN-LAST:event_XLCallMouseClicked

    private void GoCallMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GoCallMouseClicked
        Thread th4 = new Thread(){
            public void run(){
                try{
                    for (int q = 0; q <= 330; q += 1) {
                        Thread.sleep(1);
                        chooseRide.setBounds(250, 470 + q, 880, 330);
                    }
                }
                catch (Exception e){
                    System.out.println(e);
                }
            }
        };
        th4.start();
        cabCall("g");
    }//GEN-LAST:event_GoCallMouseClicked

    private void PremierCallMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PremierCallMouseClicked
        Thread th4 = new Thread(){
            public void run(){
                try{
                    for (int q = 0; q <= 330; q += 1) {
                        Thread.sleep(1);
                        chooseRide.setBounds(250, 470 + q, 880, 330);
                    }
                }
                catch (Exception e){
                    System.out.println(e);
                }
            }
        };
        th4.start();
        cabCall("p");
    }//GEN-LAST:event_PremierCallMouseClicked

    private void CloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseMouseClicked
        this.setVisible(false);
        //todo close this by destroying map object
//        Thread t = new Thread(){
//            public void run(){
//                System.exit(0);
//                this.setVisible(false);
//            }
//        };t.start();
    }//GEN-LAST:event_CloseMouseClicked

    private void minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseClicked
        this.setState(Map.ICONIFIED);
    }//GEN-LAST:event_minimizeMouseClicked

    private void findCabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findCabMouseClicked
        if(Cab.pickup == Cab.destination){
            sideMenuOpenLabel.setEnabled(true);
            Thread th = new Thread(){
                public void run(){
                    try{
                        for (int i = 420; i > 0; i -= 2) {
                            Thread.sleep(1);
                            sideMenuPanel.setBounds(0, 0, i, 768);
                        }
                        sideMenuPanel.setBounds(0, 0, 0, 768);
                    }
                    catch (Exception e){
                        System.out.println(e);
                    }
                }
            };
            th.start();
            //tripSourceTextField.setText(Integer.toString(tripSource));
            tripSourceTextField.setText("");
            tripDestinationTextField.setText("");
            Thread th1 = new Thread(){
                public void run(){
                    try{
                        for (int q = 0; q <= 200; q += 1) {
                            Thread.sleep(5);
                            PickDropBottomInputPanel.setBounds(450, 800 - q, 550, 160);
                        }
                    }
                    catch (Exception e){
                        System.out.println(e);
                    }
                }
            };th1.start();
            
        }
        else{
            JOptionPane.showMessageDialog(null, "You must complete your trip before trying to find a new ride.");
        }
    }//GEN-LAST:event_findCabMouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel11MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Map.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Map.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Map.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Map.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }
    
    double[][] distanceMatrix = new double[27][27];
    int[][] parent = new int[27][27];
    double INF = 1000000000d;
    public void distanceMatrixInit(){
        
        for(int i = 1; i < 27; i++)
        {
            for(int j = 1; j < 27; j++)
            {
                if(i == j) distanceMatrix[i][j] = 0;
                else distanceMatrix[i][j] = INF;
            }
        }
        
        distanceMatrix[1][4] = distanceMatrix[4][1] = 1.340000;
        distanceMatrix[1][6] = distanceMatrix[6][1] = 1.000000;
        distanceMatrix[1][10] = distanceMatrix[10][1] = 2.260000;
        distanceMatrix[1][25]= distanceMatrix[25][1] = 1.080000;
        distanceMatrix[2][3] = distanceMatrix[3][2] = 1.340000;
        distanceMatrix[2][25] = distanceMatrix[25][2] = 0.720000;
        distanceMatrix[3][2] = distanceMatrix[2][3] = 1.340000;
        distanceMatrix[3][4] = distanceMatrix[4][3] = 1.800000;
        distanceMatrix[4][1] = distanceMatrix[1][4] = 1.340000;
        distanceMatrix[4][3] = distanceMatrix[3][4] = 1.800000;
        distanceMatrix[4][15] = distanceMatrix[15][4] = 1.390000;
        distanceMatrix[5][6]=distanceMatrix[6][5]=1.080000;
        distanceMatrix[5][25]=distanceMatrix[25][5]=1.000000;
        distanceMatrix[6][1]=distanceMatrix[1][6]=1.000000;
        distanceMatrix[6][5]=distanceMatrix[5][6]=1.080000;
        distanceMatrix[6][7]=distanceMatrix[7][6]=1.100000;
        distanceMatrix[7][6]=distanceMatrix[6][7]=1.100000;
        distanceMatrix[7][8]=distanceMatrix[8][7]=2.260000;   
        distanceMatrix[8][7]=distanceMatrix[7][8]=2.260000;
        distanceMatrix[8][9]=distanceMatrix[9][8]=0.960000;
        distanceMatrix[8][10]=distanceMatrix[10][8]=2.100000;
        distanceMatrix[9][8]=distanceMatrix[8][9]=0.960000;
        distanceMatrix[10][1]=distanceMatrix[1][10]=2.260000;
        distanceMatrix[10][8]=distanceMatrix[8][10]=2.100000;
        distanceMatrix[10][11]=distanceMatrix[11][10]=1.340000;
        distanceMatrix[10][22]=distanceMatrix[22][10]=3.310000;
        distanceMatrix[11][10]=distanceMatrix[10][11]=1.340000;
        distanceMatrix[11][12]=distanceMatrix[12][11]=1.900000;
        distanceMatrix[11][14]=distanceMatrix[14][11]=1.390000;
        distanceMatrix[12][11]=distanceMatrix[11][12]=1.900000;
        distanceMatrix[12][13]=distanceMatrix[13][12]=1.390000;
        distanceMatrix[13][12]=distanceMatrix[12][13]=1.390000;
        distanceMatrix[13][14]=distanceMatrix[14][13]=1.900000;
        distanceMatrix[13][16]=distanceMatrix[16][13]=1.560000;
        distanceMatrix[13][17]=distanceMatrix[17][13]=1.410000;
        distanceMatrix[14][11]=distanceMatrix[11][14]=1.390000;
        distanceMatrix[14][13]=distanceMatrix[13][14]=1.900000;
        distanceMatrix[14][15]=distanceMatrix[15][14]=2.260000;
        distanceMatrix[15][4]=distanceMatrix[4][15]=1.390000;
        distanceMatrix[15][14]=distanceMatrix[14][15]=2.260000;
        distanceMatrix[16][13]=distanceMatrix[13][16]=1.560000;
        distanceMatrix[17][13]=distanceMatrix[13][17]=1.410000;
        distanceMatrix[17][18]=distanceMatrix[18][17]=4.770000;
        distanceMatrix[17][19]=distanceMatrix[19][17]=1.390000;
        distanceMatrix[18][17]=distanceMatrix[17][18]=4.770000;
        distanceMatrix[19][17]=distanceMatrix[17][19]=1.390000;
        distanceMatrix[19][20]=distanceMatrix[20][19]=2.560000;
        distanceMatrix[19][22]=distanceMatrix[22][19]=1.440000;
        distanceMatrix[20][19]=distanceMatrix[19][20]=2.560000;
        distanceMatrix[20][21]=distanceMatrix[21][20]=1.440000;
        distanceMatrix[21][20]=distanceMatrix[20][21]=1.440000;
        distanceMatrix[21][26]=distanceMatrix[26][21]=1.230000;
        distanceMatrix[22][10]=distanceMatrix[10][22]=3.310000;
        distanceMatrix[22][19]=distanceMatrix[19][22]=1.440000;
        distanceMatrix[22][24]=distanceMatrix[24][22]=1.790000;
        distanceMatrix[22][26]=distanceMatrix[26][22]=1.330000;
        distanceMatrix[23][24]=distanceMatrix[24][23]=1.330000;
        distanceMatrix[23][26]=distanceMatrix[26][23]=1.790000;
        distanceMatrix[24][22]=distanceMatrix[22][24]=1.790000;
        distanceMatrix[24][23]=distanceMatrix[23][24]=1.330000;
        distanceMatrix[25][1]=distanceMatrix[1][25]=1.080000;
        distanceMatrix[25][2]=distanceMatrix[2][25]=0.720000;
        distanceMatrix[25][5]=distanceMatrix[5][25]=1.000000;
        distanceMatrix[26][21]=distanceMatrix[21][26]=1.230000;
        distanceMatrix[26][22]=distanceMatrix[22][26]=1.330000;
        distanceMatrix[26][23]=distanceMatrix[23][26]=1.790000;
        
        for(int i = 1; i < 27; i++)
        {
            for(int j = 1; j < 27; j++)
            {
                if(i == j) parent[i][j] = j;
                else if(distanceMatrix[i][j] != 0 && distanceMatrix[i][j] != INF ) parent[i][j] = j ;   
                else parent[i][j] = -1;
            }
        }
        
        for(int k = 1; k < 27; k++)
        {
            for(int i = 1; i < 27; i++)
            {
                for(int j = 1; j < 27; j++)
                {
                    if(distanceMatrix[i][j]>distanceMatrix[i][k] + distanceMatrix[k][j])
                    {
                        distanceMatrix[i][j] = distanceMatrix[i][k] + distanceMatrix[k][j];
                        parent[i][j] = parent[i][k];
                    }
                }
            }
        }
    }    
    
    public void orientationMatrixInit() {
        
    orientationMatrix[1][10] = 0;
    orientationMatrix[1][4] = 1;
    orientationMatrix[1][25] = 2;
    orientationMatrix[1][6] = 3;
    orientationMatrix[2][25] = 0;
    orientationMatrix[2][3] = 1;
    orientationMatrix[3][4] = 0;
    orientationMatrix[3][2] = 3;
    orientationMatrix[4][15] = 1;
    orientationMatrix[4][3] = 2;
    orientationMatrix[4][1] = 3;
    orientationMatrix[5][6] = 0;
    orientationMatrix[5][25] = 1;
    orientationMatrix[6][1] = 1;
    orientationMatrix[6][5] = 2;
    orientationMatrix[6][7] = 3;
    orientationMatrix[7][8] = 0;
    orientationMatrix[7][6] = 1;
    orientationMatrix[8][10] = 1;
    orientationMatrix[8][7] = 2;
    orientationMatrix[8][9] = 3;
    orientationMatrix[9][8] = 1;
    orientationMatrix[10][22] = 0;
    orientationMatrix[10][11] = 1;
    orientationMatrix[10][1] = 2;
    orientationMatrix[10][8] = 3;
    orientationMatrix[11][12] = 0;
    orientationMatrix[11][14] = 1;
    orientationMatrix[11][10] = 3;
    orientationMatrix[12][13] = 1;
    orientationMatrix[12][11] = 2;
    orientationMatrix[13][17] = 0;
    orientationMatrix[13][16] = 1;
    orientationMatrix[13][14] = 2;
    orientationMatrix[13][12] = 3;
    orientationMatrix[14][13] = 0;
    orientationMatrix[14][15] = 2;
    orientationMatrix[14][11] = 3;
    orientationMatrix[15][14] = 0;
    orientationMatrix[15][4] = 3;
    orientationMatrix[16][13] = 3;
    orientationMatrix[17][18] = 0;
    orientationMatrix[17][13] = 2;
    orientationMatrix[17][19] = 3;
    orientationMatrix[18][17] = 2;
    orientationMatrix[19][20] = 0;
    orientationMatrix[19][17] = 1;
    orientationMatrix[19][22] = 3;
    orientationMatrix[20][19] = 2;
    orientationMatrix[20][21] = 3;
    orientationMatrix[21][20] = 1;
    orientationMatrix[21][26] = 2;
    orientationMatrix[22][26] = 0;
    orientationMatrix[22][19] = 1;
    orientationMatrix[22][10] = 2;
    orientationMatrix[22][24] = 3;
    orientationMatrix[23][26] = 1;
    orientationMatrix[23][24] = 2;
    orientationMatrix[24][23] = 0;
    orientationMatrix[24][22] = 1;
    orientationMatrix[25][1] = 0;
    orientationMatrix[25][2] = 2;
    orientationMatrix[25][5] = 3;
    orientationMatrix[26][21] = 0;
    orientationMatrix[26][22] = 2;
    orientationMatrix[26][23] = 3;
    }
        
    void renderCabClientIcons(int cabLocation, int clientLocation, int discriminant)
    {
        for(int i = 1; i <= 26; i++)
            locationLabels[i].setIcon(null);
        if(discriminant % 2 == 1) locationLabels[clientLocation].setIcon(new ImageIcon(userLocationIcon));
        if(discriminant >= 2){
        }
    }

    void trip(Cab cab) throws InterruptedException {
  
        initialCabLocation = cab.location;
        
        constructPath(initialCabLocation, tripSource);
        constructPath(tripSource, tripDestination);
        carIcon = carOrientations[orientationMatrix[cabPath[0]][cabPath[1]]];
        carIconLabel.setIcon(new ImageIcon(carIcon));
        timer.start(); 
    }
        //todo rename flag
        int flag = 3;
       
        public void actionPerformed(ActionEvent e) {
            iterator++;
            if (iterator == (index - 1) * 100)
            {
                timer.stop();
                index = 0;
                iterator = 0;
                EndTrip endTrip = new EndTrip(client);
                endTrip.setVisible(true);
                endTrip.setLocationRelativeTo(this);
                renderCabClientIcons(0, 0, 0);
            }
            else
            {
                int x0;
                x0 = iterator / 100;
                if (cabPath[x0] == tripSource)
                    renderCabClientIcons(0, 0, 0);
                Rectangle x0Bound, xBound;
                x0Bound = locationLabels[cabPath[x0]].getBounds();
                xBound = locationLabels[cabPath[x0 + 1]].getBounds();
                double a = x0Bound.x + (xBound.x - x0Bound.x)*(iterator % 100) / 100;
                double b = x0Bound.y + (xBound.y - x0Bound.y)*(iterator % 100) / 100;
                if (iterator % 100 == 0) {
                    System.out.println("Reached here");
                    carIcon = carOrientations[orientationMatrix[cabPath[x0]][cabPath[x0+1]]];
                    carIconLabel.setIcon(new ImageIcon(carIcon));
                }
                carIconLabel.setBounds((int)a, (int)b, 48, 48);
            }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Close;
    private javax.swing.JLabel GetLocation;
    private javax.swing.JPanel GoCall;
    private javax.swing.JPanel PickDropBottomInputPanel;
    private javax.swing.JPanel PremierCall;
    private javax.swing.JPanel XL;
    private javax.swing.JPanel XLCall;
    private javax.swing.JLabel XLPriceLabel;
    private javax.swing.JPanel addMoneyPanel;
    private javax.swing.JLabel carIconLabel;
    private javax.swing.JPanel chooseRide;
    private javax.swing.JLabel displayWalletLabel;
    private javax.swing.JPanel displayWalletPanel;
    private javax.swing.JPanel findCab;
    private javax.swing.JPanel go;
    private javax.swing.JLabel goPriceLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel minimize;
    private javax.swing.JLabel name;
    private javax.swing.JPanel premier;
    private javax.swing.JLabel premierPriceLabel;
    private javax.swing.JButton search;
    private javax.swing.JLabel sideMenuCloseLabel;
    private javax.swing.JLabel sideMenuOpenLabel;
    private javax.swing.JPanel sideMenuPanel;
    private javax.swing.JTextField tripDestinationTextField;
    private javax.swing.JTextField tripSourceTextField;
    private javax.swing.JLabel v1;
    private javax.swing.JLabel v10;
    private javax.swing.JLabel v11;
    private javax.swing.JLabel v12;
    private javax.swing.JLabel v13;
    private javax.swing.JLabel v14;
    private javax.swing.JLabel v15;
    private javax.swing.JLabel v16;
    private javax.swing.JLabel v17;
    private javax.swing.JLabel v18;
    private javax.swing.JLabel v19;
    private javax.swing.JLabel v2;
    private javax.swing.JLabel v20;
    private javax.swing.JLabel v21;
    private javax.swing.JLabel v22;
    private javax.swing.JLabel v23;
    private javax.swing.JLabel v24;
    private javax.swing.JLabel v25;
    private javax.swing.JLabel v26;
    private javax.swing.JLabel v3;
    private javax.swing.JLabel v4;
    private javax.swing.JLabel v5;
    private javax.swing.JLabel v6;
    private javax.swing.JLabel v7;
    private javax.swing.JLabel v8;
    private javax.swing.JLabel v9;
    // End of variables declaration//GEN-END:variables
    
    int[][] orientationMatrix = new int[27][27];
    
    private Image userLocationIcon, carIcon;
    BufferedImage carIconBufferedImage, userLocationBufferedImage;
    private Image[] carOrientations = new Image[4];

    Timer timer;
    int [] cabPath = new int[52];
    private JLabel[] locationLabels = new javax.swing.JLabel[27];
    public int tripSource, initialCabLocation, tripDestination;
    public boolean isLocationFound;
    private double minimumDistanceOfTrip = distanceMatrix[tripSource][tripDestination];
    
    int index;
    int iterator = 0;

    private void constructPath(int i, int j) {
        cabPath[index++] = i;
        if (j != i)
            constructPath(parent[i][j], j);
    }
}

